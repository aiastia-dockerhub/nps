name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (dry run)'
        required: false
        default: 'false'
        type: boolean

jobs:

  build_assets:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.21
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
      id: go
      
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Get dependencies
      run: |
        go mod download
        go mod verify
        
    - name: Build assets
      run: |
        chmod +x build.assets.sh
        ./build.assets.sh
        
    - name: Upload assets
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'workflow_dispatch'
      with:
        files: |
          freebsd_386_client.tar.gz
          freebsd_386_server.tar.gz
          freebsd_amd64_client.tar.gz
          freebsd_amd64_server.tar.gz
          freebsd_arm_client.tar.gz
          freebsd_arm_server.tar.gz
          linux_386_client.tar.gz
          linux_386_server.tar.gz
          linux_amd64_client.tar.gz
          linux_amd64_server.tar.gz
          linux_arm64_client.tar.gz
          linux_arm64_server.tar.gz
          linux_arm_v5_client.tar.gz
          linux_arm_v6_client.tar.gz
          linux_arm_v7_client.tar.gz
          linux_arm_v5_server.tar.gz
          linux_arm_v6_server.tar.gz
          linux_arm_v7_server.tar.gz
          linux_mips64le_client.tar.gz
          linux_mips64le_server.tar.gz
          linux_mips64_client.tar.gz
          linux_mips64_server.tar.gz
          linux_mipsle_client.tar.gz
          linux_mipsle_server.tar.gz
          linux_mips_client.tar.gz
          linux_mips_server.tar.gz
          darwin_amd64_client.tar.gz
          darwin_amd64_server.tar.gz
          windows_386_client.tar.gz
          windows_386_server.tar.gz
          windows_amd64_client.tar.gz
          windows_amd64_server.tar.gz
          npc_sdk.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_spk:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set env
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=latest" >> $GITHUB_ENV
        fi
        
    - name: Build Synology SPK
      run: |
        git clone https://github.com/cnlh/spksrc.git ~/spksrc
        mkdir ~/spksrc/nps && cp -rf ./* ~/spksrc/nps/
        docker run -id --name spksrc \
          --env VERSION=${{ env.RELEASE_VERSION }} \
          -e GOPROXY=direct \
          -v ~/spksrc:/spksrc \
          synocommunity/spksrc:latest /bin/bash
        docker exec spksrc /bin/bash -c 'cd /spksrc && make setup && cd /spksrc/spk/npc && make'
        cp ~/spksrc/packages/npc_noarch-all_${{ env.RELEASE_VERSION }}-1.spk ./npc_syno.spk
        
    - name: Upload Synology SPK
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'workflow_dispatch'
      with:
        files: |
          npc_syno.spk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_docker:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set env
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=latest" >> $GITHUB_ENV
        fi
        
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug
        
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push NPS image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.nps
        platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
        push: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.test_mode }}
        outputs: type=registry
        tags: |
          aiastia/nps:latest
          aiastia/nps:${{ env.RELEASE_VERSION }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Build and push NPC image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.npc
        platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
        push: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.test_mode }}
        outputs: type=registry
        tags: |
          aiastia/npc:latest
          aiastia/npc:${{ env.RELEASE_VERSION }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache 
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
